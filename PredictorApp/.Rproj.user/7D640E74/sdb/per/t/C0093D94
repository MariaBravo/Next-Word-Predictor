{
    "contents" : "\n\nlibrary(data.table)\nlibrary(plyr)\nlibrary(combinat)\nload(\"predictor.RData\", .GlobalEnv) # my saved collection of predictive n-grams\n\ndatLog <- data.table(word = character(0))\n\n\nmaxN <- 5 ## Maximum number of grams\nvWeight <- c(0.2,0.4,0.6,0.8,1,0,0,0,0,0)\nnextWord <- NULL\n\ndegSep <- 1\n\n\n\n#-----------------------------------------------------------------------------\n#-----------------------------------------------------------------------------\n\nlookBigWord <- function(vPhrase, maxPL, dfAnswers){\n  \n  vTemp <- data.table(vPhrase[1:(maxPL-1)])\n  setnames(vTemp, c(\"word\"))\n  vTemp <- vTemp[order(nchar(vTemp$word), decreasing=TRUE)]\n  nextWord <- NULL\n  \n  print(\"BIG WORDS\")\n  \n  ## Delimiting HERE  \n  temp <- c(vTemp[1],vTemp[2])\n  x <- permn(temp)\n  \n  z <- data.frame(gram1 = character(0), gram2 = character(0))\n  z <- rbind(z, unlist(x[1]))\n  z <- rbind(z, unlist(x[2]))    \n  z$gram3 <- vPhrase[10]\n  \n  setnames(z, c(\"gram1\",\"gram2\", \"gram3\"))\n  \n  r1 <- tn4[J(z$gram1, z$gram2, unique(gram3)), nomatch = 0]\n  r1$weight <- vWeight[as.numeric(4)]\n  \n  r2 <- tn5[J(z$gram1, z$gram2, z$gram3, unique(gram4)), nomatch = 0]\n  r2$weight <- vWeight[as.numeric(5)]\n  \n  ## With 5\n  temp <- c(vTemp[1],vTemp[2], vTemp[3])\n  x <- permn(temp)\n  \n  z <- data.frame(gram1 = character(0), gram2 = character(0), gram3 = character(0))\n  z <- rbind(z, unlist(x[1]))\n  z <- rbind(z, unlist(x[2]))  \n  z <- rbind(z, unlist(x[3]))  \n  \n  z$gram4 <- vPhrase[10]\n  setnames(z, c(\"gram1\",\"gram2\",\"gram3\", \"gram4\") )\n  \n  r3 <- tn5[J(z$gram1, z$gram2, z$gram3, unique(gram4)), nomatch = 0]\n  r3$weight <- vWeight[as.numeric(5)]\n  \n  w1 <- 0\n  w2 <- 0\n  w3 <- 0\n  vAnswer <- data.table(nextWord = character(0), weight = numeric(0), freq = numeric(0))\n  \n  \n  if (nrow(r1) > 0) \n  {\n    vAnswer <- rbind(vAnswer, list(r1$gram4, r1$weight, r1$freq))    \n  }\n  if (nrow(r2) > 0) \n  {\n    vAnswer <- rbind(vAnswer, list(r2$gram5, r2$weight, r2$freq))    \n  }\n  if (nrow(r3) > 0) \n  {\n    vAnswer <- rbind(vAnswer, list(r3$gram5, r3$weight, r3$freq))       \n  }\n  setnames(vAnswer, c(\"word\",\"weight\", \"freq\"))\n  \n  return(vAnswer)  \n}\n\n#-----------------------------------------------------------------------\n\nlookBackward <- function(vPhrase, numGrams, dfAnswers){\n  vTemp <- replicate(10, \"\")\n  vTemp <- vPhrase\n  for (i in numGrams:1)\n  {\n    ngram <- as.character(i)\n    switch(ngram, \"2\"  = vAnswer <- lookNgram(tn2, \"2\", vTemp, dfAnswers),\n           \"3\"  = vAnswer <- lookNgram(tn3, \"3\", vTemp, dfAnswers),\n           \"4\"  = vAnswer <- lookNgram(tn4, \"4\", vTemp, dfAnswers),\n           \"5\"  = vAnswer <- lookNgram(tn5, \"5\", vTemp, dfAnswers)\n    )  \n    colnames <- names(dfAnswers)\n    dfAnswers <- rbind(dfAnswers, vAnswer)\n    setnames(dfAnswers, colnames)\n  }\n  \n  if (nrow(dfAnswers) == 0)\n  {\n    nextWord = NULL\n    return(nextWord)\n  }else\n  {\n    nextWord <- dfAnswers\n    return(nextWord)\n  }\n}\n\n#-----------------------------------------------------------------------\n\nlookNgram <- function(ntable, ngram, vPhrase, dfAnswers){\n  r <- NULL\n  switch(ngram, \n         \"2\"  = r <- ntable[J(vPhrase[10])],\n         \n         \"3\"  = {\n           if (vPhrase[9] == '')\n           {\n             r <- ntable[J(unique(gram1), vPhrase[10]), nomatch = 0]\n           }else\n           {\n             r <- ntable[J(vPhrase[9],vPhrase[10]), nomatch = 0]\n           }\n         },\n         \n         \"4\"  = {\n           if ((vPhrase[8] == '') && (vPhrase[9] == ''))\n           {\n             r <- ntable[J(unique(gram1),unique(gram2), vPhrase[10]), nomatch = 0]\n           }else\n           {\n             if (vPhrase[8] == '')\n             {\n               r <- ntable[J(unique(gram1),vPhrase[9], vPhrase[10]), nomatch = 0]\n             }else\n             {\n               r <- ntable[J(vPhrase[8],vPhrase[9],vPhrase[10]), nomatch = 0]\n             }\n           }\n         },\n         \n         \"5\"  = {\n           if ((vPhrase[7] == '') && (vPhrase[8] == '') && (vPhrase[9] == ''))\n           {\n             r <- ntable[J(unique(gram1),unique(gram2),unique(gram3), vPhrase[10]), nomatch = 0]         \n           } else\n           {\n             if ((vPhrase[7] == '') && (vPhrase[8] == ''))\n             {\n               r <- ntable[J(unique(gram1),unique(gram2),vPhrase[9], vPhrase[10]), nomatch = 0]\n             }else\n             {\n               if (vPhrase[8] == '')\n               {\n                 r <- ntable[J(unique(gram1),vPhrase[8],vPhrase[9], vPhrase[10]), nomatch = 0]\n               }else\n               {\n                 r <- ntable[J(vPhrase[7],vPhrase[8],vPhrase[9],vPhrase[10]), nomatch = 0]         \n               }\n             }\n           }\n         }\n  )\n  \n  \n  vAnswer <- data.table(word = character(0), weight = numeric(0), freq = numeric(0))\n  \n  if ( is.na(r$freq[1]) || (nrow(r)==0))\n  {\n    return(NULL)\n  }  else\n  {\n    r <- r[order(r$freq, decreasing = TRUE)]\n    r$weight <- vWeight[as.numeric(ngram)]    \n    nextWord <- ''\n    switch(ngram, \n           \"2\"  = {\n             #nextWord <- r$gram2[1],\n             vAnswer <- rbind(vAnswer, list(r$gram2, r$freq, r$weight))\n           },\n           \"3\"  = {\n             #nextWord <- r$gram3[1]\n             vAnswer <- rbind(vAnswer, list(r$gram3, r$freq, r$weight) )\n           },\n           \"4\"  = {\n             #nextWord <- r$gram4[1]\n             vAnswer <- rbind(vAnswer, list(r$gram4, r$freq, r$weight))             \n           },\n           \"5\"  = {\n             #nextWord <- r$gram5[1]\n             vAnswer <- rbind(vAnswer, list(r$gram5, r$freq, r$weight))\n           }\n    )\n    return(as.data.table(vAnswer))\n  }\n}\n\n#-----------------------------------------------------------------------\n\npredictor <- function(sentence, maxPL, dfAnswers, datLog)\n{\n  v <- unlist(strsplit(sentence, \" \"))\n  l <- length(v)\n  \n  vSentence <- replicate(10, \"\")\n  vPhrase <- replicate(10, \"\")\n  \n  if (l == maxPL)\n  {\n    for (i in 1:l)\n    {\n      vSentence[i] <- v[i]\n    }\n  }else if (l < maxPL)\n  {\n    dif <- maxPL - l\n    for (i in l:1)\n    {\n      vSentence[i+dif] <- v[i]\n    }\n  } else\n  {\n    dif <- l - maxPL\n    for (i in maxPL:1)\n    {\n      vSentence[i] <- v[i+dif]\n    }    \n  }\n  \n  nextWord <- NULL\n  vPhrase <- vSentence[(length(vSentence) - maxPL + 1): (length(vSentence))]\n  \n  if (l < maxN)  ngram <- as.character(l + 1)\n  else ngram <- \"5\"\n  \n  switch(ngram,  \"2\"  = nextWord <- lookNgram(tn2, \"2\", vPhrase, dfAnswers),\n         \"3\"  = nextWord <- lookNgram(tn3, \"3\", vPhrase, dfAnswers),\n         \"4\"  = nextWord <- lookNgram(tn4, \"4\", vPhrase, dfAnswers),\n         \"5\"  = nextWord <- lookNgram(tn5, \"5\", vPhrase, dfAnswers))\n  \n  if (is.null(nextWord) && (l > 2))\n  {\n    dfAnswers <- data.table(word = character(0), weight = numeric(0), freq = numeric(0))      \n    vTemp <- replicate(10, \"\")\n    vTemp <- vPhrase      \n    \n    if ((l-1) < maxN)  ngram <- as.character(l - 1)\n    else ngram <- \"5\"\n    \n    nextWord <- lookBackward(vTemp, ngram, dfAnswers)\n    if (is.null(nextWord) || (nextWord == \"the\"))\n    { \n      nextWord <- lookBigWord(vPhrase, maxPL, dfAnswers)\n    }\n  }\n  \n  if (is.null(nextWord) || nrow(nextWord) == 0) \n  {\n    nextWord <- data.table(word = \"the\", weight = 1, freq = 1)      \n  } else\n  {\n    nextWord$value <- as.numeric(nextWord$weight) * as.numeric(nextWord$freq)    \n    nextWord <- nextWord[order(nextWord$freq, decreasing = TRUE)]\n    nextWord <- unique(nextWord[,list(word,weight, freq,value)])  \n    nextWord <- nextWord[,list(value=sum(value)), by=word]\n  }\n  \n  return(nextWord)\n}\n\n\n#-----------------------------------------------------------------------------\n#-----------------------------------------------------------------------------\n\npredictor2 <- function(sentence, maxPL, dfAnswers)\n{\n  vSentence <- unlist(strsplit(sentence, \" \"))\n  l <- length(vSentence)\n  if (l > maxPL)\n  {\n      vSentence <- vSentence[(l-maxPL+1):l]\n      l <- length(vSentence)\n      chunk <- maxPL\n  } else\n  {\n    chunk <- l    \n  }\n  \n  \n  iteration <- 0\n  while (chunk >= 1)\n  {\n    iteration <- iteration + 1\n    dfAnswers <- data.table(word = character(0))    \n    btw <- paste(\".\", \"{0,\", as.character(degSep), \"}\", sep = \"\") ## between the words\n    vPhrase <- \"\"\n    for (i in 1:l)\n    {\n      if (nchar(vSentence[i]) > 0)\n      {\n        #vPhrase <- paste(vPhrase,btw, '[^[:alnum:]]', vSentence[i], '[^[:alnum:]]' , sep=\"\")\n        vPhrase <- paste(vPhrase,btw, '\\\\b', vSentence[i], '\\\\b' , sep=\"\")            \n        #vPhrase <- paste(vPhrase,btw, '[ .,?¿!¡;:]+', vSentence[i], '[ .,?¿!¡;:]+' , sep=\"\")            \n      }\n    }\n    \n    #vPhrase <- paste(vPhrase,btw, sep=\"\")\n    print(vPhrase)\n    for (i in 1:3)\n    {  \n      idx <- as.character(i)\n      switch(idx,  \n             \"1\"  = result <- text1[grep(vPhrase, text1, ignore.case=TRUE)],\n             \"2\"  = result <- text2[grep(vPhrase, text2, ignore.case=TRUE)],\n             \"3\"  = result <- text3[grep(vPhrase, text3, ignore.case=TRUE)]\n      )\n      \n      size <- length(result)\n      if (size > 0)\n      {\n        for ( j in 1:size)\n        {\n          vWord <- paste('\\\\b', vSentence[l], '\\\\b' , sep=\"\")            \n          #print(vWord)\n          pos <- regexpr(vWord,result[j])    ## sentence last word position\n          if (pos[1] > 0)\n          {\n            startNextWord <- pos[1] + nchar(vSentence[l]) + 1\n            if (startNextWord < nchar(result[j]))\n            {\n              endWord <- regexpr(\"[.,¿? ]\", substr(result[j], startNextWord , nchar(result[j])))\n              nextWord <- substr(result[j], startNextWord , startNextWord + endWord[1] - 2)\n              #print(nextWord)\n             # nextWord <- gsub('[0-9]', \"\", nextWord)\n            #  nextWord <- gsub('[])(;:#%$^*\\\\~{}[&+=@/\"`|<>_]+', \"\", nextWord)\n            #  nextWord <- gsub(\"''\", \"'\", nextWord)\n            #  nextWord <- gsub(\"--\", \"-\", nextWord)\n              evaluate <- regexpr('[:alpha:]+', nextWord) # At least 1 character Alpha\n              if (evaluate[1] > 0)\n              {\n                dfAnswers <- rbind(dfAnswers, list(nextWord))                      \n              }\n            }\n          }\n        }\n      }\n    }\n    \n    if (nrow(dfAnswers) > 0)\n    {  \n      dfAnswers$word <- unlist(dfAnswers$word)\n      dfAnswers <- dfAnswers[nchar(dfAnswers$word) > 0,] ## here I take away the empty words\n      \n      dfAnswers <- count(dfAnswers,vars=\"word\")\n      dfAnswers <- dfAnswers[order(dfAnswers$freq, decreasing = TRUE),]\n    }\n    \n    if (nrow(dfAnswers) > 0)\n    {\n      chunk <- 0\n    }else\n    {\n      vSentence[iteration] <- ''\n      chunk <- chunk - 1\n      print(vSentence)\n    }        \n  } \n  \n  if (nrow(dfAnswers) == 0)\n  {\n    dfAnswers <- rbind(dfAnswers, list(\"the\"))\n  }\n  print(iteration)\n  return(dfAnswers)\n}\n\n#-----------------------------------------------------------------\n#-----------------------------------------------------------------\n\n\nshinyServer(function(input, output, session) {\n\n  output$uiOutputPanel <- renderUI({\n    \n    # Just the act of reading input$sentence will cause this block to re-execute\n    sentenceToParse <- tolower(input$sentence)\n    maxPL <- 10 ## Maximum Phrase Length\n    dfAnswers <- data.table(word = character(0), weight = numeric(0), freq = numeric(0))\n    \n    l <- nchar(sentenceToParse)\n    #log <- renderText({sentenceToParse})\n    \n    if ((l > 0) && (substr(sentenceToParse,l,l) == \" \"))\n    {\n      answers <- predictor(sentenceToParse, maxPL, dfAnswers, datLog)\n      d <- as.data.table(answers$word)\n      datLog <- rbind(datLog, d, fill=TRUE)\n      setnames(datLog, c(\"v\",\"word\"))\n \n      word1 <- \"The\"\n      word2 <- \"next\"\n      word3 <- \"word\"\n      \n      word1 <- answers$word[1]\n      if (nrow(answers) > 1) word2 <- answers$word[2]\n      if (nrow(answers) > 2) word3 <- answers$word[3]\n      \n      \n      datLog <- datLog[1:100] \n      datLog <- datLog[!is.na(datLog$word), ]\n      output$sentenceEntered <- renderText({datLog$word})\n      \n      button1Click <- paste(\"$('#sentence').val($('#sentence').val() + ' \", word1, \"').trigger('change')\", sep='')\n      button2Click <- paste(\"$('#sentence').val($('#sentence').val() + ' \", word2, \"').trigger('change')\", sep='')\n      button3Click <- paste(\"$('#sentence').val($('#sentence').val() + ' \", word3, \"').trigger('change')\", sep='')\n      \n      tags$div(\n        tags$button(type=\"button\", id=\"word1\", word1, class=\"btn action-button shiny-bound-input\", onclick=button1Click),\n        tags$button(type=\"button\", id=\"word2\", word2, class=\"btn action-button shiny-bound-input\", onclick=button2Click),\n        tags$button(type=\"button\", id=\"word3\", word3, class=\"btn action-button shiny-bound-input\", onclick=button3Click)\n      )\n    }\n    \n  })\n  \n  \n  output$uiOutputPanel2 <- renderUI({\n    \n    # Just the act of reading input$sentence will cause this block to re-execute\n    sentenceToParse2 <- tolower(input$sentence2)\n    maxPL <- 5 ## Maximum Phrase Length\n    dfAnswers <- data.table(word = character(0))\n    l <- nchar(sentenceToParse2)\n    if ((l > 0) && (substr(sentenceToParse2,l,l) == \" \"))\n    {\n      answers <- predictor2(sentenceToParse2, maxPL)\n      d <- as.data.table(answers$word)\n      datLog <- rbind(datLog, d, fill=TRUE)\n      setnames(datLog, c(\"v\",\"word\"))\n      \n      \n      word1 <- \"The\"\n      word2 <- \"next\"\n      word3 <- \"word\"\n      \n      word1 <- answers$word[1]\n      if (nrow(answers) > 1) word2 <- answers$word[2]\n      if (nrow(answers) > 2) word3 <- answers$word[3]\n      \n      datLog <- datLog[1:100] \n      datLog <- datLog[!is.na(datLog$word), ]\n      output$sentenceEntered <- renderText({datLog$word})\n      \n      button1Click <- paste(\"$('#sentence2').val($('#sentence2').val() + ' \", word1, \"').trigger('change')\", sep='')\n      button2Click <- paste(\"$('#sentence2').val($('#sentence2').val() + ' \", word2, \"').trigger('change')\", sep='')\n      button3Click <- paste(\"$('#sentence2').val($('#sentence2').val() + ' \", word3, \"').trigger('change')\", sep='')\n      \n      tags$div(\n        tags$button(type=\"button\", id=\"word1\", word1, class=\"btn action-button shiny-bound-input\", onclick=button1Click),\n        tags$button(type=\"button\", id=\"word2\", word2, class=\"btn action-button shiny-bound-input\", onclick=button2Click),\n        tags$button(type=\"button\", id=\"word3\", word3, class=\"btn action-button shiny-bound-input\", onclick=button3Click)\n      )\n    }\n  })\n  #output$sentenceEntered <- renderText({input$sentence})\n\n    \n  \n})\n\n\n\n\n",
    "created" : 1418433372543.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4273391446",
    "id" : "C0093D94",
    "lastKnownWriteTime" : 1418531884,
    "path" : "~/Desktop/Coursera/PredictorApp/server.R",
    "project_path" : "server.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}